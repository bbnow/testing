{"name":"Surf","tagline":"IoT/M2M for Amazon AWS","body":"### Description\r\n_Surf_ is an open source framework for connecting various data collection technologies (messaging, logging, applications, etc.) to _Amazon Kinesis_.\r\n\r\n![Surf Picture](https://photos-2.dropbox.com/t/0/AAD3CIQVIW-vdTRzan_XKOXknkLM0muPQtILSDSotwFltQ/12/41956826/jpeg/1024x768/3/1392836400/0/2/surf2_4.jpg/IgaHb80MIhqCTfsJiX8oWGlkCS3A9RoF-_-qSIzRxlc)\r\n\r\n_Surf_ can be used as a server connecting several devices at once. Or it can be used as a library, providing an abstracted view of _Kinesis_ API.\r\nSurf has a small run-time footprint and is easily extensible. We intend on keeping it up-to-date with emerging user requirements and active projects.  \r\n\r\n### Why Open Source IoT/M2M with AWS?\r\nInnovation in IoT/M2M space comes from two areas – _devices_ and _applications_. The connectivity fabric, operations, scaling, application integration and other platform capabilities are critical for a functioning system, but not differentiating.\r\n\r\nToday such platform capabilities are commonly provided either by Telecoms or by purpose-built products. In either case, the platforms severely limit developer’s abilities to experiment, leverage open-source community, and scale-as-you-go.\r\n\r\nWe believe that the combination of open-source frameworks and operational simplicity of AWS provides a powerful alternative to proprietary IoT/M2M platforms.\r\n\r\n![AWS Picture](https://photos-1.dropbox.com/t/0/AACzv3E3P1AfQYZ4-aVW-Ea_iQxP6YTjH9VAo8hiTiuEFw/12/41956826/jpeg/1024x768/3/1392836400/0/2/surf3_4.jpg/jEnog_Y2uGeqde8mPqnlgZ_TYR-K5B1M6d1wvTmNdsc)\r\n\r\n_Surf_ is our initial step towards open source IoT/M2M frameworks.  \r\n\r\n\r\n## Description\r\nSurf is an open source framework for connecting various data collection technologies (messaging, logging, applications, etc.) to Amazon Kinesis.\r\n\r\n\r\n### Welcome to GitHub Pages.\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here using GitHub Flavored Markdown, select a template crafted by a designer, and publish. After your page is generated, you can check out the new branch:\r\n\r\n```\r\n$ cd your_repo_root/repo_name\r\n$ git fetch origin\r\n$ git checkout gh-pages\r\n```\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\n### Designer Templates\r\nWe've crafted some handsome templates for you to use. Go ahead and continue to layouts to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved if it remained markdown format.\r\n\r\n### Rather Drive Stick?\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator written by our own Tom Preston-Werner. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at http://help.github.com/pages or contact support@github.com and we’ll help you sort it out.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}